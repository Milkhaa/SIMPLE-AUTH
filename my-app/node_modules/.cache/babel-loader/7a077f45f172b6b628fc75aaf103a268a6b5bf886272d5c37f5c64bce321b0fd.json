{"ast":null,"code":"var _jsxFileName = \"/Users/sunilkumar/Code/simple-auth/my-app/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check for existing auth token on mount\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    const storedUser = localStorage.getItem('user');\n    if (token && storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Simulate API call - Replace with actual API endpoint\n      const response = await mockAuthAPI(username, password);\n      if (response.token) {\n        localStorage.setItem('authToken', response.token);\n        localStorage.setItem('user', JSON.stringify(response.user));\n        setUser(response.user);\n      }\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    try {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      setUser(null);\n    } catch (err) {\n      console.error('Logout error:', err);\n    }\n  };\n\n  // Mock API function - Replace with real API calls\n  const mockAuthAPI = async (username, password) => {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    if (username === 'test' && password === 'test123') {\n      return {\n        token: 'mock-jwt-token',\n        user: {\n          id: 1,\n          username,\n          name: 'Test User',\n          email: 'test@example.com'\n        }\n      };\n    }\n    throw new Error('Invalid credentials');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      loading,\n      error,\n      isAuthenticated: !!user\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","token","localStorage","getItem","storedUser","JSON","parse","login","username","password","response","mockAuthAPI","setItem","stringify","err","message","logout","removeItem","console","Promise","resolve","setTimeout","id","name","email","Error","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/Users/sunilkumar/Code/simple-auth/my-app/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useState, useContext, useEffect } from 'react';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check for existing auth token on mount\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    const storedUser = localStorage.getItem('user');\n    if (token && storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (username, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Simulate API call - Replace with actual API endpoint\n      const response = await mockAuthAPI(username, password);\n      \n      if (response.token) {\n        localStorage.setItem('authToken', response.token);\n        localStorage.setItem('user', JSON.stringify(response.user));\n        setUser(response.user);\n      }\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    try {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      setUser(null);\n    } catch (err) {\n      console.error('Logout error:', err);\n    }\n  };\n\n  // Mock API function - Replace with real API calls\n  const mockAuthAPI = async (username, password) => {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    if (username === 'test' && password === 'test123') {\n      return {\n        token: 'mock-jwt-token',\n        user: {\n          id: 1,\n          username,\n          name: 'Test User',\n          email: 'test@example.com'\n        }\n      };\n    }\n    throw new Error('Invalid credentials');\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      user, \n      login, \n      logout, \n      loading, \n      error,\n      isAuthenticated: !!user \n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}